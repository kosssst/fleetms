services:
  backend:
    build: ./backend
    ports:
      - "127.0.0.1:3001:8000"
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://mongo:27017/fleetms
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
      - WEBSOCKET_N1=${WEBSOCKET_N1}
      - WEBSOCKET_T1=${WEBSOCKET_T1}
      - WEBSOCKET_T2=${WEBSOCKET_T2}
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started
    networks:
      - fleetms-network

  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: ${API_URL}
    ports:
      - "127.0.0.1:3002:3000"
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${API_URL}
    depends_on:
      - backend
    networks:
      - fleetms-network

  mongo:
    image: mongo:latest
    container_name: fleetms-mongo
    restart: unless-stopped
    ports:
      - "127.0.0.1:27017:27017"
    volumes:
      - db_data:/data/db
    networks:
      - fleetms-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: fleetms-rabbitmq
    restart: unless-stopped
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fleetms-network

  analysis-service:
    build: ./analysis-service
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://mongo:27017/fleetms
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started
    networks:
      - fleetms-network

  model-trainer:
    build: ./model-trainer
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://mongo:27017/fleetms
      - MONGO_DB=fleetms
      - RABBITMQ_URL=${RABBITMQ_URL}
      - QUEUE_IN=model-train
      - MODELS_DIR=/models
      - GAP_S=6
      - ALPHA=0.6
      - MIN_SPEED_KMH=0.0
      - GPS_SAME_EPS_M=2.0
      - GPS_MIN_SPAN_S=1.5
      - GPS_MAX_SPAN_S=15.0
      - MISMATCH_KMH=15.0
      - A_ACCEL_MAX_MS2=6.0
      - A_DECEL_MAX_MS2=6.0
      - PHYS_MARGIN_KMH=5.0
      - VMAX_KMH=160
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started
    volumes:
      - models_data:/models
    networks:
      - fleetms-network

  predictor:
    build: ./predictor-service
    restart: unless-stopped
    environment:
      MONGO_URI: "mongodb://mongo:27017"
      MONGO_DB: "fleetms"
      AMQP_URL: ${RABBITMQ_URL}
      AMQP_QUEUE: "predict.trip"
      MODELS_DIR: "/models"
      LOG_LEVEL: "INFO"
      DEBUG_FEATURES: "1"
      DEBUG_SAVE: "1"
      DEBUG_DIR: "/debug"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started
    volumes:
      - models_data:/models:ro
    networks:
      - fleetms-network

  notification-service:
    build: ./notification-service
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://mongo:27017/fleetms
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - MONGO_DB=fleetms
      - SLACK_CHANNEL=#alerts
    depends_on:
      mongo:
        condition: service_started
    networks:
      - fleetms-network

volumes:
  db_data:
  models_data:

networks:
  fleetms-network: